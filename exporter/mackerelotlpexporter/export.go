package mackerelotlpexporter

import (
	"context"
	"errors"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/config/configopaque"
	"go.opentelemetry.io/collector/exporter"
	"go.opentelemetry.io/collector/exporter/otlpexporter"
	"go.opentelemetry.io/collector/exporter/otlphttpexporter"
)

func createMetrics(ctx context.Context, set exporter.Settings, cfg component.Config) (exporter.Metrics, error) {
	mackerelOTLPCfg, ok := cfg.(*Config)
	if !ok {
		return nil, errors.New("cannot reflect to mackerelotlpexporter.Config")
	}
	mackerelApiKey, err := mackerelOTLPCfg.mackerelApiKey()
	if err != nil {
		return nil, err
	}

	factory := otlpexporter.NewFactory()

	otlpSet := exporter.Settings{
		// If "mackerelotlp" type name in settings are passed, the test generated by mdatagen fails.
		ID:                component.NewIDWithName(factory.Type(), set.ID.Name()),
		TelemetrySettings: set.TelemetrySettings,
		BuildInfo:         set.BuildInfo,
	}

	otlpCfg, ok := factory.CreateDefaultConfig().(*otlpexporter.Config)
	if !ok {
		return nil, errors.New("cannot reflect to otlphttpexporter.Config")
	}
	otlpCfg.QueueConfig = mackerelOTLPCfg.QueueConfig
	otlpCfg.RetryConfig = mackerelOTLPCfg.RetryConfig
	otlpCfg.TimeoutConfig = mackerelOTLPCfg.TimeoutConfig
	otlpCfg.ClientConfig.Headers = map[string]configopaque.String{
		"Mackerel-Api-Key": mackerelApiKey,
	}
	otlpCfg.ClientConfig.Endpoint = mackerelOTLPCfg.MetricsEndpoint
	otlpCfg.ClientConfig.Compression = "gzip"

	exp, err := factory.CreateMetrics(ctx, otlpSet, otlpCfg)
	if err != nil {
		return nil, err
	}
	return exp, nil
}

func createTraces(ctx context.Context, set exporter.Settings, cfg component.Config) (exporter.Traces, error) {
	mackerelOTLPCfg, ok := cfg.(*Config)
	if !ok {
		return nil, errors.New("cannot reflect to mackerelotlpexporter.Config")
	}
	mackerelApiKey, err := mackerelOTLPCfg.mackerelApiKey()
	if err != nil {
		return nil, err
	}

	factory := otlphttpexporter.NewFactory()

	otlpHTTPSet := exporter.Settings{
		// If "mackerelotlp" type name in settings are passed, the test generated by mdatagen fails.
		ID:                component.NewIDWithName(factory.Type(), set.ID.Name()),
		TelemetrySettings: set.TelemetrySettings,
		BuildInfo:         set.BuildInfo,
	}

	otlpHTTPCfg, ok := factory.CreateDefaultConfig().(*otlphttpexporter.Config)
	if !ok {
		return nil, errors.New("cannot reflect to otlphttpexporter.Config")
	}
	otlpHTTPCfg.QueueConfig = mackerelOTLPCfg.QueueConfig
	otlpHTTPCfg.RetryConfig = mackerelOTLPCfg.RetryConfig
	otlpHTTPCfg.ClientConfig.Timeout = mackerelOTLPCfg.TimeoutConfig.Timeout
	otlpHTTPCfg.ClientConfig.Headers = map[string]configopaque.String{
		"Mackerel-Api-Key": mackerelApiKey,
		"Accept":           "*/*",
	}
	otlpHTTPCfg.ClientConfig.Endpoint = mackerelOTLPCfg.TracesEndpoint
	otlpHTTPCfg.ClientConfig.Compression = "gzip"

	exp, err := factory.CreateTraces(ctx, otlpHTTPSet, otlpHTTPCfg)
	if err != nil {
		return nil, err
	}
	return exp, nil
}
